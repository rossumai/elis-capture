# Android

fastlane_require 'dotenv'

ENV['APPLICATION_VERSION'] = "1.0"
ENV['ENVIRONMENT'] = "PRODUCTION"
XCODE_WORKSPACE_PATH = "./ios/elisCapture.xcworkspace"
XCODE_PROJECT_PATH   = "./ios/elisCapture.xcodeproj"
GRADLE_FILE_PATH = "./android/app/build.gradle"
GRADLE_FILE_FOLDER_PATH = "./android/app/"

before_all do
  Dotenv.overload '../.env.fastlane'
end

desc "Bump build number and git tag"
lane :bump_version do
  ensure_git_branch

  add_git_tag(tag: (last_git_tag.to_i + 1).to_s)
end

platform :android do
  desc "Build and submit Elis Capture to Play Store Beta"
  lane :test do
    build(type: :release_internal)

    # Distribute for beta testing
    upload_to_play_store(
      package_name: 'com.eliscapture',
      track: 'beta',
      apk: './android/app/build/outputs/apk/release/app-release.apk',
      check_superseded_tracks: true
    )
  end

  desc "Build Elis Capture application type"
  private_lane :build do |options|
    # Ensure all required options are in place
    %i(type).each do |option|
      raise "This argument #{option} needs to be set" unless present?(options[option])
    end

    # Type of build
    type = options[:type].to_sym

    unless %i(release_production release_internal).include? type.to_sym
      raise "This build type #{type} is not supported"
    end

    # Ensure all required environment variables are in place
    check_envs(%w(ENVIRONMENT APPLICATION_VERSION))


    # Generate app configuration
    # TODO: Check that we're using proper environment variables
    # generate_env_file

    android_set_version_code(
      version_code: last_git_tag,
      gradle_file: GRADLE_FILE_PATH
    )

    android_set_version_name(
      version_name: "#{ENV['APPLICATION_VERSION']}.#{last_git_tag}".to_s,
      gradle_file: GRADLE_FILE_PATH
    )

    build_android_app(
      task: 'assemble',
      flavor: '',
      build_type: 'release',
      gradle_path: "./android/gradlew",
      flags: "--build-file #{GRADLE_FILE_PATH} --stacktrace --no-daemon"
    )

  end
end

#############################IOS#############################

platform :ios do

  desc "Download appstore, release and development certificates"
  lane :fetch_certificates do
    sync_code_signing(
      app_identifier: "ai.rossum.elis.capture",
      type: "development",
      readonly: true
    )
  end

  desc "Build and deploy iOS app"
  lane :stage do    

    sync_code_signing(
    app_identifier: "ai.rossum.elis.capture",
    type: "appstore"
    )

    plistBuildNumber = get_build_number(
      xcodeproj: XCODE_PROJECT_PATH,
    ).to_i

    latestTestflightBuildNumber = latest_testflight_build_number(app_identifier: "ai.rossum.elis.capture").to_i
    resultBuildNumber = plistBuildNumber

    if plistBuildNumber > latestTestflightBuildNumber 
      resultBuildNumber = plistBuildNumber
    elsif plistBuildNumber == latestTestflightBuildNumber
      resultBuildNumber = plistBuildNumber.to_i + 1
    else
      puts "Warning, your fastlane build number is bigger then your xcode build number"
      resultBuildNumber = latestTestflightBuildNumber.to_i + 1
    end

    increment_build_number(
      build_number: resultBuildNumber.to_s,
      xcodeproj: XCODE_PROJECT_PATH
    )

    build_ios_app(
      scheme: "elisCapture",
      configuration: "Release",
      export_method: "app-store",
      workspace: XCODE_WORKSPACE_PATH
    )

    if resultBuildNumber != plistBuildNumber 
      # Commit the version bump
      commit_version_bump(
        xcodeproj: XCODE_PROJECT_PATH,
        force: true
      )
    end


    # Add a git tag for this build. This will automatically
    # use an appropriate git tag name
    add_git_tag

    # # Push the new commit and tag bacsk to your git remote
    # push_to_git_remote

    pilot(
      app_identifier: "ai.rossum.elis.capture",
      skip_waiting_for_build_processing: true
    )
  end
end

def check_envs(variables)
  variables.each do |env|
    unless present?(ENV[env])
      raise "You need to specify #{env} environment"
    end
  end
end

def present?(value)
  !value.nil? && !value.to_s.empty?
end


# Read and write version from/into files and store it to hash
def increment_version_number_android
  properties = {}
  properties['versionCode'] = increment_android_code
  properties['versionName'] = increment_android_name
  properties
end

def increment_android_code
  versionCode = File.read('../android/versionCode')
  versionCode = versionCode.succ
  f = File.new('../android/versionCode', 'w')
  f.write(versionCode)
  f.close
  versionCode.gsub(/\n/, '')
end

def increment_android_name
  versionName = File.read('../android/versionName')
  versionName = versionName.succ
  f = File.new('../android/versionName', 'w')
  f.write(versionName)
  f.close
  versionName.gsub(/\n/, '')
end